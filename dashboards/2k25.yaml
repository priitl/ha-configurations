button_card_templates:
  setup:
    tap_action:
      action: more-info
    show_icon: true
    show_name: true
    show_state: false
  custom_card_sensor_medium:
    template: setup
    variables:
      state: |
        [[[
          var st = states[entity.entity_id].state;
          var uni = ' %';
          return `
          ${parseFloat(st).toFixed(0)}<span style="font-size:
        0.5em;opacity:0.7">${uni}</span>
          `
        ]]]
    show_label: true
    label: '[[[ return variables.state ]]]'
    styles:
      grid:
        - grid-template-columns: 62px 1fr
        - grid-template-areas: '"i l" "i n"'
        - grid-template-rows: auto auto
        - align-content: center
        - gap: 2px
      icon:
        - width: 24px
        - color: var(--contrast20)
      img_cell:
        - justify-self: start
        - width: 45px
        - height: 45px
        - background: var(--contrast1)
        - border-radius: 50%
        - margin-left: 7px
        - align-self: center
      label:
        - justify-self: start
        - font-size: 20px
        - font-weight: 500
        - color: var(--contrast20)
        - align-self: end
        - line-height: 1
      card:
        - height: 66px
        - border-radius: 24px
        - padding: 4px 20px 4px 4px
        - background: var(--contrast2)
      name:
        - justify-self: start
        - font-size: 11px
        - color: var(--contrast20)
        - opacity: 0.7
        - align-self: start
        - line-height: 1
        - padding-top: 4px
  custom_card_room_sensor:
    triggers_update:
      - '[[[ return variables.target_temp_entity ]]]'
      - >-
        [[[ return variables.light_entities ? variables.light_entities.map(l =>
        l.entity).join(",") : "" ]]]
      - '[[[ return variables.temp_entity ]]]'
      - '[[[ return variables.humidity_entity ]]]'
      - '[[[ return variables.co2_entity ]]]'
    show_icon: true
    show_name: true
    show_state: false
    variables:
      room_name: ''
      temp_entity: ''
      humidity_entity: ''
      co2_entity: ''
      radius: 24px
      icon: mdi:thermometer
      light_entities: []
      target_temp_entity: ''
    entity: '[[[ return variables.temp_entity ]]]'
    icon: '[[[ return variables.icon ]]]'
    name: '[[[ return variables.room_name ]]]'
    label: |
      [[[
        var parts = [];

        // Temperature
        var tempEntity = states[variables.temp_entity];
        var temp;
        if (tempEntity) {
          if (variables.temp_entity.startsWith('climate.')) {
            temp = tempEntity.attributes.current_temperature;
          } else {
            temp = tempEntity.state;
          }
        }
        if (!tempEntity || temp === undefined || temp === null || temp === 'unavailable' || temp === 'unknown') {
          temp = (Math.random() * 6 + 18).toFixed(1);
        }
        parts.push(`${parseFloat(temp).toFixed(1).replace(".", ",")} °C`);

        // Humidity
        if (variables.humidity_entity) {
          var humState = states[variables.humidity_entity];
          var humValue;
          if (humState && humState.state !== 'unavailable' && humState.state !== 'unknown') {
            humValue = parseFloat(humState.state);
          } else {
            humValue = Math.floor(Math.random() * 40) + 30;
          }
          parts.push(`${humValue.toFixed(0)}%`);
        }

        // CO2
        if (variables.co2_entity) {
          var co2State = states[variables.co2_entity];
          var co2Value;
          if (co2State && co2State.state !== 'unavailable' && co2State.state !== 'unknown') {
            co2Value = parseFloat(co2State.state);
          } else {
            co2Value = Math.floor(Math.random() * 800) + 400;
          }
          parts.push(`${co2Value} ppm`);
        }

        return parts.join(' • ');
      ]]]
    show_label: true
    custom_fields:
      light1:
        card:
          type: custom:button-card
          entity: >-
            [[[ return variables.light_entities && variables.light_entities[0] ?
            variables.light_entities[0].entity : "" ]]]
          show_name: false
          show_state: false
          icon: >-
            [[[ return variables.light_entities && variables.light_entities[0] ?
            (variables.light_entities[0].icon || "mdi:lightbulb") :
            "mdi:lightbulb" ]]]
          state:
            - value: "on"
              styles:
                icon:
                  - color: "#FFDA78"
          styles:
            card:
              - display: >-
                  [[[ return variables.light_entities &&
                  variables.light_entities.length > 0 &&
                  variables.light_entities[0] ? "block" : "none" ]]]
              - background: transparent
              - border-radius: 12px
              - width: 32px
              - height: 32px
              - box-shadow: none
            icon:
              - color: "#6f6f6f"
              - width: 18px
          tap_action:
            action: toggle
          hold_action:
            action: more-info
      light2:
        card:
          type: custom:button-card
          entity: >-
            [[[ return variables.light_entities && variables.light_entities[1] ?
            variables.light_entities[1].entity : "" ]]]
          show_name: false
          show_state: false
          icon: >-
            [[[ return variables.light_entities && variables.light_entities[1] ?
            (variables.light_entities[1].icon || "mdi:lightbulb") :
            "mdi:lightbulb" ]]]
          state:
            - value: "on"
              styles:
                icon:
                  - color: "#FFDA78"
          styles:
            card:
              - display: >-
                  [[[ return variables.light_entities &&
                  variables.light_entities.length > 1 &&
                  variables.light_entities[1] ? "block" : "none" ]]]
              - background: transparent
              - border-radius: 12px
              - width: 32px
              - height: 32px
              - box-shadow: none
            icon:
              - color: "#6f6f6f"
              - width: 18px
          tap_action:
            action: toggle
          hold_action:
            action: more-info
      light3:
        card:
          type: custom:button-card
          entity: >-
            [[[ return variables.light_entities && variables.light_entities[2] ?
            variables.light_entities[2].entity : "" ]]]
          show_name: false
          show_state: false
          icon: >-
            [[[ return variables.light_entities && variables.light_entities[2] ?
            (variables.light_entities[2].icon || "mdi:lightbulb") :
            "mdi:lightbulb" ]]]
          state:
            - value: "on"
              styles:
                icon:
                  - color: "#FFDA78"
          styles:
            card:
              - display: >-
                  [[[ return variables.light_entities &&
                  variables.light_entities.length > 2 &&
                  variables.light_entities[2] ? "block" : "none" ]]]
              - background: transparent
              - border-radius: 12px
              - width: 32px
              - height: 32px
              - box-shadow: none
            icon:
              - color: "#6f6f6f"
              - width: 18px
          tap_action:
            action: toggle
          hold_action:
            action: more-info
      temp_minus:
        card:
          type: custom:button-card
          entity: '[[[ return variables.target_temp_entity || "" ]]]'
          icon: mdi:minus
          show_name: false
          show_state: false
          styles:
            card:
              - display: '[[[ return variables.target_temp_entity ? "block" : "none" ]]]'
              - background: transparent
              - box-shadow: none
              - width: 32px
              - height: 32px
              - border-radius: 12px
            icon:
              - color: var(--contrast20)
              - width: 18px
          tap_action:
            action: perform-action
            perform_action: input_number.decrement
            target:
              entity_id: '[[[ return variables.target_temp_entity ]]]'
      temp_display:
        card:
          type: custom:button-card
          entity: '[[[ return variables.target_temp_entity || "sensor.time" ]]]'
          show_icon: false
          show_name: false
          show_state: true
          state_display: >-
            [[[ return variables.target_temp_entity &&
            states[variables.target_temp_entity] &&
            states[variables.target_temp_entity].state ?
            parseFloat(states[variables.target_temp_entity].state).toFixed(1).replace(".",
            ",") : "" ]]]
          styles:
            card:
              - display: '[[[ return variables.target_temp_entity ? "flex" : "none" ]]]'
              - background: none
              - box-shadow: none
              - width: 30px
              - height: 32px
              - align-items: center
              - justify-content: center
            state:
              - font-size: 14px
              - font-weight: 500
              - color: var(--contrast20)
          tap_action:
            action: none
      temp_plus:
        card:
          type: custom:button-card
          entity: '[[[ return variables.target_temp_entity || "" ]]]'
          icon: mdi:plus
          show_name: false
          show_state: false
          styles:
            card:
              - display: '[[[ return variables.target_temp_entity ? "block" : "none" ]]]'
              - background: transparent
              - box-shadow: none
              - width: 32px
              - height: 32px
              - border-radius: 12px
            icon:
              - color: var(--contrast20)
              - width: 18px
          tap_action:
            action: perform-action
            perform_action: input_number.increment
            target:
              entity_id: '[[[ return variables.target_temp_entity ]]]'
    styles:
      grid:
        - grid-template-columns: 50px 1fr repeat(6, 32px)
        - grid-template-areas: >-
            "i n light3 light2 light1 temp_minus temp_display temp_plus" "i l
            light3 light2 light1 temp_minus temp_display temp_plus"
        - grid-template-rows: auto auto
        - align-content: center
        - gap: 2px
        - column-gap: 1px
      icon:
        - width: 24px
        - color: '#6f6f6f'
      img_cell:
        - justify-self: start
        - width: 36px
        - height: 36px
        - background: '#242529'
        - border-radius: 50%
        - margin-left: 10px
        - align-self: center
      name:
        - justify-self: start
        - font-size: 14px
        - color: var(--primary-text-color)
        - font-weight: 500
        - align-self: end
        - line-height: 1
        - margin-left: 4px
      label:
        - justify-self: start
        - font-size: 12px
        - color: var(--primary-text-color)
        - align-self: start
        - line-height: 1
        - padding-top: 2px
        - margin-left: 4px
        - text-overflow: unset
        - overflow: visible
        - white-space: nowrap
      card:
        - height: 66px
        - border-radius: 24px
        - padding: 4px 20px 4px 4px
        - background: var(--contrast2)
      custom_fields:
        controls:
          - justify-self: end
          - align-self: center
  custom_card_sensor_small:
    template: setup
    variables:
      state: |
        [[[
          var st = states[entity.entity_id].state;
          var uni = ' %';
          return `
          ${parseFloat(st).toFixed(0)}<span style="font-size:
        0.5em;opacity:0.7">${uni}</span>
          `
        ]]]
    show_label: true
    show_icon: false
    label: '[[[ return variables.state ]]]'
    styles:
      grid:
        - grid-template-columns: 1fr
        - grid-template-areas: '"l" "n"'
      label:
        - justify-self: start
        - font-size: 20px
        - padding-top: 4px
        - font-weight: 500
        - color: var(--contrast20)
      card:
        - height: 66px
        - border-radius: 24px
        - padding: 12px 10px 10px 14px
        - background: var(--contrast2)
      name:
        - justify-self: start
        - font-size: 11px
        - color: var(--contrast20)
        - opacity: 0.7
        - padding-bottom: 7px
  custom_card_user:
    template: setup
    show_entity_picture: false
    show_icon: false
    show_label: true
    entity: |
      [[[
        return "person." + user.name.toLowerCase() + "l"
      ]]]
    name: '[[[return "Hello, " + user.name]]]'
    label: |
      [[[
        if (entity && entity.state == "home") {
          return "Welcome home.";
        } else {
          return "See you later.";
        }
      ]]]
    tap_action:
      action: navigate
      navigation_path: settings
    state:
      - value: not_home
        styles:
          entity_picture:
            - filter: grayscale(100%)
      - value: unknown
        styles:
          entity_picture:
            - filter: grayscale(100%)
    styles:
      card:
        - padding: 12px 12px 12px 12px
        - background: none
        - box-shadow: none
      grid:
        - grid-template-areas: '"pic n one two three four" "pic l one two three four"'
        - grid-template-rows: min-content min-content min-content
        - grid-template-columns: 50px 1fr 50px 50px 50px 50px
      name:
        - justify-self: start
        - align-self: center
        - font-weight: 700
        - font-size: 15px
        - padding-left: 15px
        - padding-top: 5px
      label:
        - justify-self: start
        - align-self: start
        - font-size: 12px
        - font-weight: 500
        - color: var(--contrast14)
        - padding-left: 15px
      entity_picture:
        - width: 40px
        - height: 40px
        - border-radius: 12px
      custom_fields:
        badge:
          - position: absolute
          - left: 47px
          - top: 9px
    custom_fields:
      badge:
        card:
          type: custom:button-card
          entity: '[[[ return entity.entity_id ]]]'
          show_icon: true
          show_name: false
          icon: mdi:account-tie-voice
          state:
            - value: not_home
              styles:
                card:
                  - background: var(--red)
            - value: unknown
              styles:
                card:
                  - background: var(--red)
          styles:
            card:
              - border-radius: 50%
              - width: 16px
              - height: 16px
              - background: var(--green)
              - z-index: 1
            icon:
              - color: var(--black)
              - width: 10px
      pic:
        card:
          type: custom:button-card
          entity: '[[[ return entity.entity_id ]]]'
          show_name: false
          show_entity_picture: true
          state:
            - value: not_home
              styles:
                entity_picture:
                  - filter: grayscale(100%)
            - value: unknown
              styles:
                entity_picture:
                  - filter: grayscale(100%)
          double_tap_action:
            action: assist
            pipeline_id: preferred
          styles:
            card:
              - background: none
              - box-shadow: none
            entity_picture:
              - width: 40px
              - height: 40px
              - border-radius: 12px
            img_cell:
              - background-color: var(--contrast1)
              - width: 40px
              - height: 40px
              - border-radius: 12px
      one:
        card:
          type: custom:button-card
          entity: person.priitl
          show_name: false
          show_entity_picture: true
          state:
            - value: not_home
              styles:
                entity_picture:
                  - filter: grayscale(100%)
                  - opacity: 0.5
            - value: unknown
              styles:
                entity_picture:
                  - filter: grayscale(100%)
                  - opacity: 0.5
          styles:
            card:
              - background: none
              - box-shadow: none
              - z-index: 5
              - margin-left: 60px
            entity_picture:
              - width: 40px
              - height: 40px
              - border-radius: 12px
            img_cell:
              - background-color: var(--contrast1)
              - width: 40px
              - height: 40px
              - border-radius: 12px
      two:
        card:
          type: custom:button-card
          entity: person.tarmol
          show_name: false
          show_entity_picture: true
          state:
            - value: not_home
              styles:
                entity_picture:
                  - filter: grayscale(100%)
                  - opacity: 0.5
            - value: unknown
              styles:
                entity_picture:
                  - filter: grayscale(100%)
                  - opacity: 0.5
          styles:
            card:
              - background: none
              - box-shadow: none
              - z-index: 4
              - margin-left: 40px
            entity_picture:
              - width: 40px
              - height: 40px
              - border-radius: 12px
            img_cell:
              - background-color: var(--contrast1)
              - width: 40px
              - height: 40px
              - border-radius: 12px
      three:
        card:
          type: custom:button-card
          entity: person.ljudal
          show_name: false
          show_entity_picture: true
          state:
            - value: not_home
              styles:
                entity_picture:
                  - filter: grayscale(100%)
                  - opacity: 0.5
            - value: unknown
              styles:
                entity_picture:
                  - filter: grayscale(100%)
                  - opacity: 0.5
          styles:
            card:
              - background: none
              - box-shadow: none
              - z-index: 3
              - margin-left: 20px
            entity_picture:
              - width: 40px
              - height: 40px
              - border-radius: 12px
            img_cell:
              - background-color: var(--contrast1)
              - width: 40px
              - height: 40px
              - border-radius: 12px
      four:
        card:
          type: custom:button-card
          entity: person.riinal
          show_name: false
          show_entity_picture: true
          state:
            - value: not_home
              styles:
                entity_picture:
                  - filter: grayscale(100%)
                  - opacity: 0.5
            - value: unknown
              styles:
                entity_picture:
                  - filter: grayscale(100%)
                  - opacity: 0.5
          styles:
            card:
              - background: none
              - box-shadow: none
              - z-index: 2
            entity_picture:
              - width: 40px
              - height: 40px
              - border-radius: 12px
            img_cell:
              - background-color: var(--contrast1)
              - width: 40px
              - height: 40px
              - border-radius: 12px
kiosk_mode:
  non_admin_settings:
    hide_header: true
    ignore_entity_settings: true
  entity_settings:
    - entity:
        input_boolean.hide_view_headers: 'on'
      hide_header: true
    - entity:
        input_boolean.hide_view_headers: 'off'
      hide_header: false
decluttering_templates:
  footer_template:
    default:
      - color-1: var(--contrast20)
      - color-2: var(--contrast20)
      - color-3: var(--contrast20)
      - color-4: var(--contrast20)
      - color-5: var(--contrast20)
      - bgcolor-1: var(--contrast4)
      - bgcolor-2: var(--contrast4)
      - bgcolor-3: var(--contrast4)
      - bgcolor-4: var(--contrast4)
      - bgcolor-5: var(--contrast4)
  shared_navbar:
    default: []
    card:
      type: custom:navbar-card
      routes:
        - url: /dashboard-2k25/home
          icon: mdi:home
          label: Home
          tap_action:
            action: navigate
            navigation_path: /dashboard-2k25/home
        - url: /dashboard-2k25/energy
          icon: mdi:flash
          label: Energy
          tap_action:
            action: navigate
            navigation_path: /dashboard-2k25/energy
          badge:
            - condition: template
              value_template: >-
                {{ states('sensor.shellypro3em_2cbcbba6f604_total_active_power')
                | float(0) > 1 }}
              text: >-
                {{
                (states('sensor.shellypro3em_2cbcbba6f604_total_active_power') |
                float(0)) | round(1) }}kW
              color: >
                {% set power =
                states('sensor.shellypro3em_2cbcbba6f604_total_active_power') |
                float(0) %} {% if power > 5 %}
                  red
                {% elif power > 2 %}
                  orange
                {% else %}
                  green
                {% endif %}
        - icon: mdi:dots-horizontal
          label: More
          tap_action:
            action: open-popup
          popup:
            - icon: mdi:cog
              url: /config/dashboard
            - icon: mdi:hammer
              url: /developer-tools/yaml
            - icon: mdi:power
              tap_action:
                action: call-service
                service: homeassistant.restart
                service_data: {}
                confirmation:
                  text: Are you sure you want to restart Home Assistant?
      desktop:
        position: left
        min_width: 768
        show_labels: true
      mobile:
        show_labels: true
      media_player:
        entity: media_player.denon_avr_x2800h_2
        album_cover_background: true
  shared_header:
    default:
      - greeting_text: Good Morning
    card:
      type: markdown
      text_only: true
      content: |-
        {% if (states("sensor.time_of_day") == "morning") %}
          # Good Morning, {{user}}!
          It's {{ states("sensor.time") }}, the weather is {{ state_translated("weather.ilm_lepiksaare") | lower }} with {{ state_attr("weather.ilm_lepiksaare","temperature") }}°C.
        {% elif (states("sensor.time_of_day") == "day") %}
          # Hey, {{user}}!
          It's {{ states("sensor.time") }}, the weather is {{ state_translated("weather.ilm_lepiksaare") | lower }} with {{ state_attr("weather.ilm_lepiksaare","temperature") }}°C.
        {% elif (states("sensor.time_of_day") == "evening") %}
          # Good Evening, {{user}}!
          It's {{ states("sensor.time") }}, the weather is {{ state_translated("weather.ilm_lepiksaare") | lower }} with {{ state_attr("weather.ilm_lepiksaare","temperature") }}°C.
        {% elif (states("sensor.time_of_day") == "night") %}
          # Good Night, {{user}}!
          It's {{ states("sensor.time") }}, the weather is {{ state_translated("weather.ilm_lepiksaare") | lower }} with {{ state_attr("weather.ilm_lepiksaare","temperature") }}°C.
        {% endif %}
views:
  - path: home
    header:
      card:
        type: custom:decluttering-card
        template: shared_header
        visibility:
          - condition: screen
            media_query: '(min-width: 768px)'
      layout: responsive
      badges_position: top
      badges_wrap: scroll
    sections:
      - type: grid
        cards:
          - type: vertical-stack
            cards:
              - type: custom:button-card
                template: custom_card_user
              - type: custom:bubble-card
                card_type: empty-column
            visibility:
              - condition: screen
                media_query: '(min-width: 0px) and (max-width: 767px)'
          - type: custom:button-card
            entity: input_text.ai_weather_report
            show_label: true
            show_name: false
            show_icon: true
            label: |
              [[[
                return states['input_text.ai_weather_report'].state
              ]]]
            icon: mdi:newspaper-variant-outline
            styles:
              grid:
                - grid-template-columns: 50px 1fr
                - grid-template-areas: '"i l" "i l"'
                - grid-template-rows: auto auto
                - align-content: center
                - gap: 2px
              icon:
                - width: 24px
                - color: '#6f6f6f'
              img_cell:
                - justify-self: start
                - width: 36px
                - height: 36px
                - background: '#242529'
                - border-radius: 50%
                - margin-left: 10px
                - align-self: center
              label:
                - justify-self: start
                - font-size: 12px
                - color: var(--contrast14)
                - font-weight: 500
                - align-self: center
                - line-height: 1.4
                - margin-left: 4px
                - text-overflow: unset
                - overflow: visible
                - white-space: normal
                - word-wrap: break-word
                - text-align: left
              card:
                - height: 100px
                - border-radius: 24px
                - padding: 4px 20px 4px 4px
                - background: var(--contrast2)
          - type: heading
            heading: Rooms
            heading_style: title
            icon: mdi:google-classroom
          - square: false
            columns: 1
            type: grid
            cards:
              - type: custom:button-card
                template: custom_card_room_sensor
                variables:
                  room_name: Suur Tuba
                  temp_entity: sensor.mitsubishi_pump_indoor
                  humidity_entity: ''
                  co2_entity: sensor.living_room_co2
                  icon: mdi:sofa
                  light_entities:
                    - entity: light.suure_toa_soogilaua_tuled
                      name: Söögilaua tuled
                      icon: mdi:lightbulb-group
                  target_temp_entity: input_number.living_room_temp
              - type: custom:button-card
                template: custom_card_room_sensor
                variables:
                  room_name: Pööningutuba
                  temp_entity: sensor.ag_one_temperature
                  humidity_entity: sensors.ag_one_humidity
                  co2_entity: sensor.ag_one_carbon_dioxide
                  icon: mdi:home-roof
                  target_temp_entity: input_number.attic_temp
                  light_entities:
                    - entity: light.shellydimmer2_ec64c9c66cdd
                      name: Pööningutoa ripplambid
                      icon: mdi:ceiling-light
                      brightness: false
                      collapsible: true
                    - entity: light.shellydimmer2_ec64c9c4d1f4
                      name: Pööningutoa LED
                      icon: mdi:light-flood-up
                    - entity: light.h619a
                      name: Arvutikapi LED
                      icon: mdi:led-strip-variant
                      brightness: true
                      color_temp: true
                      color: true
                      collapsible: true
                      use_color: true
              - type: custom:button-card
                template: custom_card_room_sensor
                variables:
                  room_name: Kontor
                  temp_entity: climate.mill_heatergen3panel
                  humidity_entity: ''
                  co2_entity: sensor.upper_room_co2
                  icon: mdi:chair-rolling
                  target_temp_entity: input_number.office_temp
              - type: custom:button-card
                template: custom_card_room_sensor
                variables:
                  room_name: Köök
                  temp_entity: sensor.kitchen_temperature
                  humidity_entity: sensor.kitchen_humidity
                  co2_entity: sensor.kitchen_co2
                  icon: mdi:chef-hat
                  light_entities:
                    - entity: switch.nutipistik_1
                      name: Köögi LED
                      icon: mdi:led-strip-variant
              - type: custom:button-card
                template: custom_card_room_sensor
                variables:
                  room_name: Koridor
                  temp_entity: sensor.hallway_temperature
                  humidity_entity: sensor.hallway_humidity
                  co2_entity: ''
                  icon: mdi:stairs
              - type: custom:button-card
                template: custom_card_room_sensor
                variables:
                  room_name: Vasja Köök
                  temp_entity: sensor.esp32_vasja_tuba_sht41_temperature
                  humidity_entity: sensor.esp32_vasja_tuba_sht41_humidity
                  co2_entity: sensor.esp32_vasja_tuba_co2
                  icon: mdi:human-cane
      - type: grid
        cards:
          - type: heading
            heading: Devices
            heading_style: title
            icon: mdi:hvac
          - square: false
            columns: 1
            type: grid
            cards:
              - type: custom:mushroom-climate-card
                entity: climate.mill_heatergen3panel
                fill_container: false
                show_temperature_control: true
                collapsible_controls: false
                tap_action:
                  action: more-info
                primary_info: name
                secondary_info: state
                hvac_modes: []
                layout: horizontal
                card_mod:
                  style: |
                    ha-card {
                      height: 66px;
                      border-radius: 24px;
                      padding: 4px 20px 4px 4px;
                      background: var(--contrast2);
                    }
              - type: custom:mushroom-climate-card
                entity: climate.mill_heatergen3panel_2
                fill_container: false
                show_temperature_control: true
                collapsible_controls: false
                tap_action:
                  action: more-info
                primary_info: name
                secondary_info: state
                hvac_modes: []
                layout: horizontal
                card_mod:
                  style: |
                    ha-card {
                      height: 66px;
                      border-radius: 24px;
                      padding: 4px 20px 4px 4px;
                      background: var(--contrast2);
                    }
              - type: custom:mushroom-climate-card
                entity: climate.mitsubishi_pump
                show_temperature_control: true
                layout: horizontal
                tap_action:
                  action: more-info
                card_mod:
                  style: |
                    ha-card {
                      height: 66px;
                      border-radius: 24px;
                      padding: 4px 20px 4px 4px;
                      background: var(--contrast2);
                    }
        column_span: 4
      - type: grid
        cards:
          - type: custom:decluttering-card
            template: shared_navbar
    badges:
      - type: custom:mushroom-template-badge
        icon: |
          {% set weather_state = states('weather.ilm_lepiksaare') %}
          {% if weather_state == 'sunny' %}
            mdi:weather-sunny
          {% elif weather_state == 'clear-night' %}
            mdi:weather-night
          {% elif weather_state == 'partlycloudy' %}
            mdi:weather-partly-cloudy
          {% elif weather_state == 'cloudy' %}
            mdi:weather-cloudy
          {% elif weather_state == 'fog' %}
            mdi:weather-fog
          {% elif weather_state == 'rainy' %}
            mdi:weather-rainy
          {% elif weather_state == 'pouring' %}
            mdi:weather-pouring
          {% elif weather_state == 'snowy' %}
            mdi:weather-snowy
          {% elif weather_state == 'snowy-rainy' %}
            mdi:weather-snowy-rainy
          {% elif weather_state == 'windy' %}
            mdi:weather-windy
          {% elif weather_state == 'hail' %}
            mdi:weather-hail
          {% elif weather_state == 'lightning' %}
            mdi:weather-lightning
          {% else %}
            mdi:weather-partly-cloudy
          {% endif %}
        content: >-
          {{ state_attr('weather.ilm_lepiksaare', 'temperature') }}°C • {{
          state_attr('weather.ilm_lepiksaare', 'humidity') }}%
        color: |
          {% set weather_state = states('weather.ilm_lepiksaare') %}
          {% if weather_state in ['sunny', 'clear-night'] %}
            yellow
          {% elif weather_state in ['partlycloudy', 'cloudy'] %}
            grey
          {% elif weather_state in ['rainy', 'pouring'] %}
            blue
          {% elif weather_state in ['snowy', 'snowy-rainy'] %}
            light-blue
          {% elif weather_state in ['fog'] %}
            grey
          {% else %}
            orange
          {% endif %}
        entity: weather.ilm_lepiksaare
        tap_action:
          action: more-info
      - type: custom:mushroom-template-badge
        icon: mdi:cctv
        content: Camera
        color: blue
        entity: camera.maja_kaamera_fluent
        tap_action:
          action: more-info
      - type: custom:mushroom-template-badge
        icon: |
          {% if is_state('input_boolean.away_mode', 'on') %}
            mdi:home-export-outline
          {% else %}
            mdi:home
          {% endif %}
        content: |
          {% if is_state('input_boolean.away_mode', 'on') %}
            Away
          {% else %}
            Home
          {% endif %}
        color: |
          {% if is_state('input_boolean.away_mode', 'on') %}
            orange
          {% else %}
            green
          {% endif %}
        entity: input_boolean.away_mode
        tap_action:
          action: toggle
  - path: rooms
    header:
      card:
        type: custom:decluttering-card
        template: shared_header
        visibility:
          - condition: screen
            media_query: '(min-width: 768px)'
      layout: responsive
      badges_position: top
      badges_wrap: scroll
    sections:
      - type: grid
        cards:
          - type: vertical-stack
            cards:
              - type: custom:button-card
                template: custom_card_user
              - type: custom:bubble-card
                card_type: empty-column
            visibility:
              - condition: screen
                media_query: '(min-width: 0px) and (max-width: 767px)'
          - type: custom:decluttering-card
            template: shared_navbar
    badges:
      - type: custom:mushroom-template-badge
        icon: |
          {% set weather_state = states('weather.ilm_lepiksaare') %}
          {% if weather_state == 'sunny' %}
            mdi:weather-sunny
          {% elif weather_state == 'clear-night' %}
            mdi:weather-night
          {% elif weather_state == 'partlycloudy' %}
            mdi:weather-partly-cloudy
          {% elif weather_state == 'cloudy' %}
            mdi:weather-cloudy
          {% elif weather_state == 'fog' %}
            mdi:weather-fog
          {% elif weather_state == 'rainy' %}
            mdi:weather-rainy
          {% elif weather_state == 'pouring' %}
            mdi:weather-pouring
          {% elif weather_state == 'snowy' %}
            mdi:weather-snowy
          {% elif weather_state == 'snowy-rainy' %}
            mdi:weather-snowy-rainy
          {% elif weather_state == 'windy' %}
            mdi:weather-windy
          {% elif weather_state == 'hail' %}
            mdi:weather-hail
          {% elif weather_state == 'lightning' %}
            mdi:weather-lightning
          {% else %}
            mdi:weather-partly-cloudy
          {% endif %}
        content: >-
          {{ state_attr('weather.ilm_lepiksaare', 'temperature') }}°C • {{
          state_attr('weather.ilm_lepiksaare', 'humidity') }}%
        color: |
          {% set weather_state = states('weather.ilm_lepiksaare') %}
          {% if weather_state in ['sunny', 'clear-night'] %}
            yellow
          {% elif weather_state in ['partlycloudy', 'cloudy'] %}
            grey
          {% elif weather_state in ['rainy', 'pouring'] %}
            blue
          {% elif weather_state in ['snowy', 'snowy-rainy'] %}
            light-blue
          {% elif weather_state in ['fog'] %}
            grey
          {% else %}
            orange
          {% endif %}
        entity: weather.ilm_lepiksaare
        tap_action:
          action: more-info
      - type: custom:mushroom-template-badge
        icon: mdi:cctv
        content: Camera
        color: blue
        entity: camera.maja_kaamera_fluent
        tap_action:
          action: more-info
      - type: custom:mushroom-template-badge
        icon: |
          {% if is_state('input_boolean.away_mode', 'on') %}
            mdi:home-export-outline
          {% else %}
            mdi:home
          {% endif %}
        content: |
          {% if is_state('input_boolean.away_mode', 'on') %}
            Away
          {% else %}
            Home
          {% endif %}
        color: |
          {% if is_state('input_boolean.away_mode', 'on') %}
            orange
          {% else %}
            green
          {% endif %}
        entity: input_boolean.away_mode
        tap_action:
          action: toggle
  - path: energy
    header:
      card:
        type: custom:decluttering-card
        template: shared_header
        visibility:
          - condition: screen
            media_query: '(min-width: 768px)'
      layout: responsive
      badges_position: top
      badges_wrap: scroll
    max_columns: 3
    badges:
      - type: custom:mushroom-template-badge
        icon: |
          {% set weather_state = states('weather.ilm_lepiksaare') %}
          {% if weather_state == 'sunny' %}
            mdi:weather-sunny
          {% elif weather_state == 'clear-night' %}
            mdi:weather-night
          {% elif weather_state == 'partlycloudy' %}
            mdi:weather-partly-cloudy
          {% elif weather_state == 'cloudy' %}
            mdi:weather-cloudy
          {% elif weather_state == 'fog' %}
            mdi:weather-fog
          {% elif weather_state == 'rainy' %}
            mdi:weather-rainy
          {% elif weather_state == 'pouring' %}
            mdi:weather-pouring
          {% elif weather_state == 'snowy' %}
            mdi:weather-snowy
          {% elif weather_state == 'snowy-rainy' %}
            mdi:weather-snowy-rainy
          {% elif weather_state == 'windy' %}
            mdi:weather-windy
          {% elif weather_state == 'hail' %}
            mdi:weather-hail
          {% elif weather_state == 'lightning' %}
            mdi:weather-lightning
          {% else %}
            mdi:weather-partly-cloudy
          {% endif %}
        content: >-
          {{ state_attr('weather.ilm_lepiksaare', 'temperature') }}°C • {{
          state_attr('weather.ilm_lepiksaare', 'humidity') }}%
        color: |
          {% set weather_state = states('weather.ilm_lepiksaare') %}
          {% if weather_state in ['sunny', 'clear-night'] %}
            yellow
          {% elif weather_state in ['partlycloudy', 'cloudy'] %}
            grey
          {% elif weather_state in ['rainy', 'pouring'] %}
            blue
          {% elif weather_state in ['snowy', 'snowy-rainy'] %}
            light-blue
          {% elif weather_state in ['fog'] %}
            grey
          {% else %}
            orange
          {% endif %}
        entity: weather.ilm_lepiksaare
        tap_action:
          action: more-info
      - type: custom:mushroom-template-badge
        icon: mdi:cctv
        content: Camera
        color: blue
        entity: camera.maja_kaamera_fluent
        tap_action:
          action: more-info
      - type: custom:mushroom-template-badge
        icon: |
          {% if is_state('input_boolean.away_mode', 'on') %}
            mdi:home-export-outline
          {% else %}
            mdi:home
          {% endif %}
        content: |
          {% if is_state('input_boolean.away_mode', 'on') %}
            Away
          {% else %}
            Home
          {% endif %}
        color: |
          {% if is_state('input_boolean.away_mode', 'on') %}
            orange
          {% else %}
            green
          {% endif %}
        entity: input_boolean.away_mode
        tap_action:
          action: toggle
    sections:
      - type: grid
        cards:
          - type: vertical-stack
            cards:
              - type: custom:button-card
                template: custom_card_user
              - type: custom:bubble-card
                card_type: empty-column
            visibility:
              - condition: screen
                media_query: '(min-width: 0px) and (max-width: 767px)'
          - type: heading
            heading: Overview
            heading_style: title
            icon: mdi:view-dashboard
          - square: false
            columns: 2
            type: grid
            cards:
              - type: custom:button-card
                template: custom_card_sensor_medium
                entity: sensor.shellypro3em_2cbcbba6f604_total_active_power
                name: Current Power
                icon: mdi:lightning-bolt
                variables:
                  state: |
                    [[[
                      var st = states[entity.entity_id].state;
                      var uni = ' kW';
                      return `
                      ${parseFloat(st).toFixed(2)}<span style="font-size:
                    0.5em;opacity:0.7">${uni}</span>
                      `
                    ]]]
              - type: custom:button-card
                template: custom_card_sensor_medium
                entity: sensor.current_energy_price_eur
                name: Current Price
                icon: mdi:currency-eur
                variables:
                  state: |
                    [[[
                      var st = states[entity.entity_id].state;
                      var uni = ' €/kWh';
                      return `
                      ${parseFloat(st).toFixed(2)}<span style="font-size:
                    0.5em;opacity:0.7">${uni}</span>
                      `
                    ]]]
              - type: custom:button-card
                template: custom_card_sensor_medium
                entity: sensor.daily_energy
                name: Daily Energy
                icon: mdi:calendar-today
                variables:
                  state: |
                    [[[
                      var st = states[entity.entity_id].state;
                      var uni = ' kWh';
                      return `
                      ${parseFloat(st).toFixed(2)}<span style="font-size:
                    0.5em;opacity:0.7">${uni}</span>
                      `
                    ]]]
              - type: custom:button-card
                template: custom_card_sensor_medium
                entity: sensor.daily_energy_cost
                name: Daily Cost
                icon: mdi:cash
                variables:
                  state: |
                    [[[
                      var st = states[entity.entity_id].state;
                      var uni = ' €';
                      return `
                      ${parseFloat(st).toFixed(2)}<span style="font-size:
                    0.5em;opacity:0.7">${uni}</span>
                      `
                    ]]]
      - type: grid
        cards:
          - type: heading
            heading: Insights
            heading_style: title
            icon: mdi:lightbulb-on
          - square: false
            columns: 1
            type: grid
            cards:
              - type: custom:button-card
                variables:
                  state: |
                    [[[
                      var power = parseFloat(states['sensor.shellypro3em_2cbcbba6f604_total_active_power'].state);
                      if (power > 5) {
                        return 'High Usage Alert';
                      } else if (power > 2) {
                        return 'Moderate Usage';
                      } else {
                        return 'Low Usage';
                      }
                    ]]]
                  secondary: |
                    [[[
                      var power = parseFloat(states['sensor.shellypro3em_2cbcbba6f604_total_active_power'].state);
                      if (power > 5) {
                        return 'Consider reducing usage during peak hours';
                      } else if (power > 2) {
                        return 'Normal household consumption';
                      } else {
                        return 'Great! Low energy consumption';
                      }
                    ]]]
                show_label: true
                show_name: true
                show_icon: true
                label: '[[[ return variables.state ]]]'
                name: '[[[ return variables.secondary ]]]'
                icon: |
                  [[[
                    var power = parseFloat(states['sensor.shellypro3em_2cbcbba6f604_total_active_power'].state);
                    if (power > 5) {
                      return 'mdi:alert';
                    } else if (power > 2) {
                      return 'mdi:information';
                    } else {
                      return 'mdi:check-circle';
                    }
                  ]]]
                styles:
                  grid:
                    - grid-template-columns: 62px 1fr
                    - grid-template-areas: '"i l" "i n"'
                  icon:
                    - width: 24px
                    - color: |
                        [[[
                          var power = parseFloat(states['sensor.shellypro3em_2cbcbba6f604_total_active_power'].state);
                          if (power > 5) {
                            return 'red';
                          } else if (power > 2) {
                            return 'orange';
                          } else {
                            return 'green';
                          }
                        ]]]
                  img_cell:
                    - justify-self: start
                    - width: 45px
                    - height: 45px
                    - background: var(--contrast1)
                    - border-radius: 50%
                    - margin-left: 7px
                  label:
                    - justify-self: start
                    - font-size: 18px
                    - padding-top: 4px
                    - font-weight: 500
                    - color: var(--contrast20)
                  card:
                    - height: 66px
                    - border-radius: 24px
                    - padding: 4px 20px 4px 4px
                    - background: var(--contrast2)
                  name:
                    - justify-self: start
                    - font-size: 11px
                    - color: var(--contrast20)
                    - opacity: 0.7
                    - padding-bottom: 7px
                    - overflow: visible
                    - white-space: normal
                    - word-wrap: break-word
              - type: custom:button-card
                variables:
                  state: |
                    [[[
                      var currentPrice = parseFloat(states['sensor.current_energy_price_eur'].state);
                      if (currentPrice > 0.40) {
                        return 'Extremely Expensive';
                      } else if (currentPrice > 0.27) {
                        return 'Very Expensive';
                      } else if (currentPrice > 0.21) {
                        return 'Expensive';
                      } else if (currentPrice > 0.13) {
                        return 'Average Price';
                      } else if (currentPrice > 0.08) {
                        return 'Good Price';
                      } else {
                        return 'Excellent Price';
                      }
                    ]]]
                  secondary: |
                    [[[
                      var currentPrice = parseFloat(states['sensor.current_energy_price_eur'].state);
                      var avgPrice = parseFloat(states['sensor.daily_average_energy_price_eur'].state);
                      var diff = ((currentPrice - avgPrice) / avgPrice * 100);
                      var diffText = '';
                      if (Math.abs(diff) < 1) {
                        diffText = 'Matches daily average';
                      } else if (diff > 0) {
                        diffText = `${diff.toFixed(0)}% above daily average of ${avgPrice.toFixed(2)} €`;
                      } else {
                        diffText = `${Math.abs(diff).toFixed(0)}% below daily average of ${avgPrice.toFixed(2)} €`;
                      }
                      return `${diffText}`;
                    ]]]
                show_label: true
                show_name: true
                show_icon: true
                label: '[[[ return variables.state ]]]'
                name: '[[[ return variables.secondary ]]]'
                icon: |
                  [[[
                    var currentPrice = parseFloat(states['sensor.current_energy_price_eur'].state);
                    if (currentPrice > 0.40) {
                      return 'mdi:alert-octagon';
                    } else if (currentPrice > 0.27) {
                      return 'mdi:alert';
                    } else if (currentPrice > 0.21) {
                      return 'mdi:trending-up';
                    } else if (currentPrice > 0.13) {
                      return 'mdi:trending-neutral';
                    } else if (currentPrice > 0.08) {
                      return 'mdi:trending-down';
                    } else {
                      return 'mdi:check-circle';
                    }
                  ]]]
                styles:
                  grid:
                    - grid-template-columns: 62px 1fr
                    - grid-template-areas: '"i l" "i n"'
                  icon:
                    - width: 24px
                    - color: |
                        [[[
                          var currentPrice = parseFloat(states['sensor.current_energy_price_eur'].state);
                          if (currentPrice > 0.40) {
                            return 'var(--red)';
                          } else if (currentPrice > 0.27) {
                            return 'var(--red)';
                          } else if (currentPrice > 0.21) {
                            return 'var(--orange)';
                          } else if (currentPrice > 0.13) {
                            return 'var(--yellow)';
                          } else if (currentPrice > 0.08) {
                            return 'var(--blue)';
                          } else {
                            return 'var(--green)';
                          }
                        ]]]
                  img_cell:
                    - justify-self: start
                    - width: 45px
                    - height: 45px
                    - background: var(--contrast1)
                    - border-radius: 50%
                    - margin-left: 7px
                  label:
                    - justify-self: start
                    - font-size: 18px
                    - padding-top: 4px
                    - font-weight: 500
                    - color: var(--contrast20)
                  card:
                    - height: 66px
                    - border-radius: 24px
                    - padding: 4px 20px 4px 4px
                    - background: var(--contrast2)
                  name:
                    - justify-self: start
                    - font-size: 11px
                    - color: var(--contrast20)
                    - opacity: 0.7
                    - padding-bottom: 7px
                    - overflow: visible
                    - white-space: normal
                    - word-wrap: break-word
              - type: custom:button-card
                variables:
                  state: |
                    [[[
                      var startTime = states['sensor.nord_pool_ee_lowest_price'].attributes.start;
                      var endTime = states['sensor.nord_pool_ee_lowest_price'].attributes.end;
                      if (startTime && endTime) {
                        var start = new Date(startTime).getHours();
                        var end = new Date(endTime).getHours();
                        return `Best time ${start}:00 - ${end}:00`;
                      } else {
                        return 'Best time for consumption';
                      }
                    ]]]
                  secondary: |
                    [[[
                      var lowestPrice = parseFloat(states['sensor.lowest_energy_price_eur'].state);
                      return `Lowest price of the day at ${lowestPrice.toFixed(2)} €/kWh`;
                    ]]]
                show_label: true
                show_name: true
                show_icon: true
                label: '[[[ return variables.state ]]]'
                name: '[[[ return variables.secondary ]]]'
                icon: mdi:clock-check
                styles:
                  grid:
                    - grid-template-columns: 62px 1fr
                    - grid-template-areas: '"i l" "i n"'
                  icon:
                    - width: 24px
                    - color: var(--green)
                  img_cell:
                    - justify-self: start
                    - width: 45px
                    - height: 45px
                    - background: var(--contrast1)
                    - border-radius: 50%
                    - margin-left: 7px
                  label:
                    - justify-self: start
                    - font-size: 18px
                    - padding-top: 4px
                    - font-weight: 500
                    - color: var(--contrast20)
                  card:
                    - height: 66px
                    - border-radius: 24px
                    - padding: 4px 20px 4px 4px
                    - background: var(--contrast2)
                  name:
                    - justify-self: start
                    - font-size: 11px
                    - color: var(--contrast20)
                    - opacity: 0.7
                    - padding-bottom: 7px
                    - overflow: visible
                    - white-space: normal
                    - word-wrap: break-word
              - type: custom:button-card
                variables:
                  state: |
                    [[[
                      var startTime = states['sensor.nord_pool_ee_highest_price'].attributes.start;
                      var endTime = states['sensor.nord_pool_ee_highest_price'].attributes.end;
                      if (startTime && endTime) {
                        var start = new Date(startTime).getHours();
                        var end = new Date(endTime).getHours();
                        return `Worst time ${start}:00 - ${end}:00`;
                      } else {
                        return 'Worst time for consumption';
                      }
                    ]]]
                  secondary: |
                    [[[
                      var highestPrice = parseFloat(states['sensor.highest_energy_price_eur'].state);
                      return `Highest price of the day at ${highestPrice.toFixed(2)} €/kWh`;
                    ]]]
                show_label: true
                show_name: true
                show_icon: true
                label: '[[[ return variables.state ]]]'
                name: '[[[ return variables.secondary ]]]'
                icon: mdi:close-circle
                styles:
                  grid:
                    - grid-template-columns: 62px 1fr
                    - grid-template-areas: '"i l" "i n"'
                  icon:
                    - width: 24px
                    - color: var(--red)
                  img_cell:
                    - justify-self: start
                    - width: 45px
                    - height: 45px
                    - background: var(--contrast1)
                    - border-radius: 50%
                    - margin-left: 7px
                  label:
                    - justify-self: start
                    - font-size: 18px
                    - padding-top: 4px
                    - font-weight: 500
                    - color: var(--contrast20)
                  card:
                    - height: 66px
                    - border-radius: 24px
                    - padding: 4px 20px 4px 4px
                    - background: var(--contrast2)
                  name:
                    - justify-self: start
                    - font-size: 11px
                    - color: var(--contrast20)
                    - opacity: 0.7
                    - padding-bottom: 7px
                    - overflow: visible
                    - white-space: normal
                    - word-wrap: break-word
      - type: grid
        cards:
          - type: heading
            heading: Price Controls
            heading_style: title
            icon: mdi:tune
          - square: false
            columns: 1
            type: grid
            cards:
              - type: custom:button-card
                template: custom_card_room_sensor
                entity: input_number.min_price
                name: Min Price
                icon: mdi:arrow-down-circle
                variables:
                  target_temp_entity: input_number.min_price
                label: |
                  [[[
                    var state = states['input_number.min_price'];
                    if (state && state.state) {
                      return `${parseFloat(state.state).toFixed(1)} ct/kWh`;
                    }
                    return 'N/A';
                  ]]]
              - type: custom:button-card
                template: custom_card_room_sensor
                entity: input_number.max_price
                name: Max Price
                icon: mdi:arrow-up-circle
                variables:
                  target_temp_entity: input_number.max_price
                label: |
                  [[[
                    var state = states['input_number.max_price'];
                    if (state && state.state) {
                      return `${parseFloat(state.state).toFixed(1)} ct/kWh`;
                    }
                    return 'N/A';
                  ]]]
          - type: custom:decluttering-card
            template: shared_navbar
      - type: grid
        cards:
          - type: heading
            heading: Energy Analytics
            heading_style: title
            icon: mdi:chart-line
          - type: custom:apexcharts-card
            header:
              show: false
              show_states: false
            graph_span: 24h
            span:
              start: hour
              offset: '-23h'
            all_series_config:
              group_by:
                duration: 1h
            series:
              - entity: sensor.current_energy_price_eur
                name: Energy Price
                type: area
                color: var(--red)
                stroke_width: 3
                float_precision: 2
                unit: €/kWh
                yaxis_id: left
                curve: stepline
                show:
                  extremas: true
                group_by:
                  duration: 1h
                  func: last
                transform: return x * 100;
                fill_raw: last
              - entity: sensor.shellypro3em_2cbcbba6f604_total_active_energy
                name: Energy Consumption
                type: column
                color: var(--blue)
                opacity: 0.6
                stroke_width: 1
                float_precision: 2
                unit: kWh
                yaxis_id: right
                show:
                  extremas: true
                group_by:
                  duration: 1h
                  func: diff
            apex_config:
              chart:
                type: line
                height: 350
                background: transparent
                stacked: false
                toolbar:
                  show: false
                zoom:
                  enabled: false
                dropShadow:
                  enabled: true
                  top: 2
                  left: 2
                  blur: 4
                  opacity: 0.2
              plotOptions:
                bar:
                  columnWidth: 90%
                  borderRadius: 0
                  rangeBarOverlap: false
                  distributed: false
                  dataLabels:
                    position: center
                area:
                  fillTo: origin
              stroke:
                colors:
                  - var(--red)
                  - var(--blue)
                width:
                  - 3
                  - 1
              grid:
                borderColor: var(--contrast6)
                strokeDashArray: 2
              xaxis:
                type: datetime
                labels:
                  style:
                    fontSize: 11px
                    colors: var(--contrast15)
                axisBorder:
                  show: false
                axisTicks:
                  show: false
                crosshairs:
                  show: true
                  position: back
              yaxis:
                - id: left
                  title:
                    text: ''
                  opposite: false
                  labels:
                    style:
                      colors: var(--contrast12)
                    formatter: |
                      EVAL:function(value) {
                        return value.toFixed(2);
                      }
                - id: right
                  title:
                    text: ''
                  labels:
                    style:
                      colors: var(--contrast12)
                    formatter: |
                      EVAL:function(value) {
                        return value.toFixed(2);
                      }
                  opposite: true
              tooltip:
                shared: true
                intersect: false
                custom: |
                  EVAL:function({series, seriesIndex, dataPointIndex, w}) {
                    var energyPrice = series[0][dataPointIndex];
                    var energyConsumption = series[1][dataPointIndex];

                    return '<div style="padding: 10px; background: var(--contrast2); border-radius: 8px; color: var(--contrast20);">' +
                           '<div><strong>Energy Price:</strong> ' + (energyPrice ? energyPrice.toFixed(2) + ' ct/kWh' : 'N/A') + '</div>' +
                           '<div><strong>Energy Consumption:</strong> ' + (energyConsumption ? energyConsumption.toFixed(2) + ' kWh' : 'N/A') + '</div>' +
                           '</div>';
                  }
              annotations:
                yaxis:
                  - 'y': max
                    yAxisIndex: 0
                    borderColor: transparent
                    label:
                      borderColor: transparent
                      style:
                        background: transparent
                        color: var(--contrast12)
                        fontSize: 11px
                      text: ct/kWh
                      position: left
                      offsetX: 25
                      offsetY: 35
                  - 'y': max
                    yAxisIndex: 1
                    borderColor: transparent
                    label:
                      borderColor: transparent
                      style:
                        background: transparent
                        color: var(--contrast12)
                        fontSize: 11px
                      text: kWh
                      position: right
                      offsetX: 15
                      offsetY: 35
              legend:
                show: false
            card_mod:
              style: |
                ha-card {
                  background: var(--contrast2);
                  border-radius: var(--ha-card-border-radius);
                  box-shadow: 0 2px 4px rgba(var(--contrast1-RGB), 0.1);
                }
        column_span: 3
